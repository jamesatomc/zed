name: 'Build Windows Executable'
description: 'Builds the Zed executable for Windows'
runs:
  using: 'composite'
  steps:
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc
        components: clippy, rustfmt

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0"

    - name: Install additional dependencies
      shell: powershell
      run: |
        # Install required Windows-specific dependencies
        # Use VS Build Tools installer instead of winget
        $installerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
        $installerPath = "$env:TEMP\vs_buildtools.exe"
        Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
        
        # Install necessary components for C++ development
        Start-Process -FilePath $installerPath -ArgumentList `
          "--quiet", "--wait", "--norestart", `
          "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
          "--add Microsoft.VisualStudio.Component.Windows10SDK.19041" `
          -Wait -NoNewWindow
        
        # Verify installation 
        if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC")) {
            Write-Warning "Visual Studio Build Tools installation may have failed."
        }

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build Zed executable
      shell: powershell
      run: |
        $env:RUSTFLAGS = "-C target-feature=+crt-static"
        cargo build --release --bin zed
        if (-not $?) { throw "Build failed" }
        
    - name: Verify build output
      shell: powershell
      run: |
        if (-not (Test-Path "target/release/zed.exe")) {
          throw "Build output not found"
        }
        
    - name: Package executable
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path "dist"
        Copy-Item "target/release/zed.exe" -Destination "dist/"
        
        # Copy assets folder if needed
        if (Test-Path "assets") {
          Copy-Item -Path "assets" -Destination "dist/" -Recurse
        }
        
        # Copy any required DLLs or configurations
        if (Test-Path "crates/zed/config") {
          Copy-Item -Path "crates/zed/config" -Destination "dist/" -Recurse
        }
        
        # Create a zip archive of the distribution
        Compress-Archive -Path "dist/*" -DestinationPath "zed-windows.zip" -Force
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zed-windows
        path: zed-windows.zip
        retention-days: 7
