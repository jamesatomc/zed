name: 'Build Windows Executable'
description: 'Builds the Zed executable for Windows'
runs:
  using: 'composite'
  steps:
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-pc-windows-msvc
        components: clippy, rustfmt

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15.0"

    - name: Configure PATH to prioritize Visual Studio tools
      shell: pwsh
      run: |
        # Ensure Visual Studio's link.exe is used, not Git's
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        Write-Host "VS Path: $vsPath"
        
        # Find MSVC Tools directory
        $msvcPath = Get-ChildItem -Path "$vsPath\VC\Tools\MSVC" | Sort-Object -Property Name -Descending | Select-Object -First 1
        $msvcBinPath = Join-Path -Path $msvcPath.FullName -ChildPath "bin\Hostx64\x64"
        Write-Host "MSVC Bin Path: $msvcBinPath"
        
        # Verify link.exe in the VS path
        $vsLinkPath = Join-Path -Path $msvcBinPath -ChildPath "link.exe"
        if (Test-Path $vsLinkPath) {
          Write-Host "Found Visual Studio link.exe at: $vsLinkPath"
        } else {
          Write-Warning "Could not find Visual Studio link.exe in expected location!"
        }
        
        # If Git's link.exe is in the PATH, we need to change the PATH to prioritize VS
        $gitLinkPath = Get-Command link.exe -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
        if ($gitLinkPath -and $gitLinkPath -like "*Git*") {
          Write-Warning "Found Git's link.exe in PATH: $gitLinkPath"
          Write-Host "Will prioritize Visual Studio's link.exe in PATH"
        }
        
        # Prepend VS paths to system PATH
        $env:PATH = "$msvcBinPath;$env:PATH"
        echo "PATH=$msvcBinPath;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Also set LIB and INCLUDE for the compiler
        $libPath = Join-Path -Path $msvcPath.FullName -ChildPath "lib\x64"
        $includePath = Join-Path -Path $msvcPath.FullName -ChildPath "include"
        echo "LIB=$libPath;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "INCLUDE=$includePath;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Find and configure Spectre mitigation
      shell: pwsh
      run: |
        # Find Visual Studio installation path
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        Write-Host "VS Path: $vsPath"
        
        # Find MSVC Tools version
        $msvcPath = Get-ChildItem -Path "$vsPath\VC\Tools\MSVC" | Sort-Object -Property Name -Descending | Select-Object -First 1
        Write-Host "MSVC Path: $msvcPath"
        
        # Locate Spectre libraries
        $spectrePath = Join-Path -Path $msvcPath.FullName -ChildPath "lib\spectre"
        Write-Host "Looking for Spectre libraries at: $spectrePath"
        
        if (Test-Path $spectrePath) {
          Write-Host "Found Spectre mitigation libraries at: $spectrePath"
        } else {
          Write-Host "Trying alternative locations..."
          $paths = @(
            "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\lib\spectre",
            "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\*\lib\spectre"
          )
          
          foreach ($pattern in $paths) {
            $found = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue | Sort-Object -Property Name -Descending | Select-Object -First 1
            if ($found) {
              $spectrePath = $found.FullName
              Write-Host "Found Spectre libraries at: $spectrePath"
              break
            }
          }
        }

        if (-not (Test-Path $spectrePath)) {
          Write-Host "WARNING: Could not locate Spectre mitigation libraries!"
          Write-Host "Attempting to install them directly..."
          
          # Try to install the component again directly
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe" modify `
            --installPath "$vsPath" `
            --quiet --norestart `
            --add Microsoft.VisualStudio.Component.VC.ATLMFC.Spectre `
            --add Microsoft.VisualStudio.Component.VC.MFC.SPECTRE `
            --add Microsoft.VisualStudio.Component.VC.Spectre `
            --add Microsoft.VisualStudio.Component.Spectre.MitigatedLibs.Latest
          
          # Check again after installation
          if (Test-Path $spectrePath) {
            Write-Host "Successfully installed Spectre libraries at: $spectrePath"
          } else {
            Write-Host "WARNING: Still could not find Spectre libraries. Build may fail."
          }
        }
        
        # Set required environment variables
        "VCINSTALLDIR=$vsPath\VC\" | Out-File -FilePath $env:GITHUB_ENV -Append
        "VCToolsInstallDir=$msvcPath\FullName" | Out-File -FilePath $env:GITHUB_ENV -Append
        "SPECTRE_MITIGATION_PATH=$spectrePath" | Out-File -FilePath $env:GITHUB_ENV -Append
        "VCPKG_FEATURE_FLAGS=-binarycaching" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Set the special environment variable needed by msvc_spectre_libs crate
        "MSVC_SPECTRE_LIBS_PATH=$spectrePath" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Set up shorter paths for Cargo
      shell: powershell
      run: |
        # Create shorter path for cargo cache
        New-Item -ItemType Directory -Force -Path "C:\cr"
        $env:CARGO_HOME = "C:\cr"
        echo "CARGO_HOME=C:\cr" | Out-File -FilePath $env:GITHUB_ENV -Append
        
        # Create shorter path for build target
        New-Item -ItemType Directory -Force -Path "C:\zb"
        echo "CARGO_TARGET_DIR=C:\zb" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          C:\cr
          C:\zb
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Verify build environment
      shell: powershell
      run: |
        # Verify which link.exe is being used
        $linkPath = (Get-Command link.exe -ErrorAction SilentlyContinue).Source
        Write-Host "Using link.exe from: $linkPath"
        
        # Check PATH environment variable
        Write-Host "PATH Environment Variable:"
        $env:PATH -split ';' | ForEach-Object { Write-Host "  $_" }
        
        # Check for Visual Studio tools
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        $msvcPath = Get-ChildItem -Path "$vsPath\VC\Tools\MSVC" | Sort-Object -Property Name -Descending | Select-Object -First 1
        Write-Host "Visual Studio at: $vsPath"
        Write-Host "MSVC Tools at: $msvcPath"

    - name: Build Zed executable
      shell: powershell
      run: |
        $env:RUSTFLAGS = "-C target-feature=+crt-static"
        
        # Set paths for Spectre-mitigated libraries so cargo can find them
        $env:LIB = "$env:SPECTRE_MITIGATION_PATH\x64;$env:LIB"
        $env:MSVC_SPECTRE_LIBS_PATH = "$env:SPECTRE_MITIGATION_PATH"
        
        Write-Host "Using Spectre libraries from: $env:MSVC_SPECTRE_LIBS_PATH"
        Write-Host "LIB path includes: $env:LIB"
        
        # Build with verbose output to see what's happening
        cargo build --release --bin zed --no-default-features -v
        if (-not $?) { throw "Build failed" }
        
    - name: Verify build output
      shell: powershell
      run: |
        # Look in the correct output directory
        if (-not (Test-Path "C:\zb\release\zed.exe")) {
          throw "Build output not found"
        }
        
    - name: Package executable
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path "dist"
        # Copy from the correct build location
        Copy-Item "C:\zb\release\zed.exe" -Destination "dist/"
        
        # Copy assets folder if needed
        if (Test-Path "assets") {
          Copy-Item -Path "assets" -Destination "dist/" -Recurse
        }
        
        # Copy any required DLLs or configurations
        if (Test-Path "crates/zed/config") {
          Copy-Item -Path "crates/zed/config" -Destination "dist/" -Recurse
        }
        
        # Create a zip archive of the distribution
        Compress-Archive -Path "dist/*" -DestinationPath "zed-windows.zip" -Force
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zed-windows
        path: zed-windows.zip
        retention-days: 7
