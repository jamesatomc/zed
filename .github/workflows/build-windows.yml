name: Build Windows Executable

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      # Enable long path support for Windows
      - name: Enable long paths
        shell: powershell
        run: |
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -Type DWord -Force
          git config --system core.longpaths true
      
      # VS Build Tools installation with Spectre mitigation
      - name: Install Visual Studio components
        shell: powershell
        run: |
          $installerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
          $installerPath = "$env:TEMP\vs_buildtools.exe"
          Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
          
          # Install with Spectre mitigation libraries and Windows SDK
          Start-Process -FilePath $installerPath -ArgumentList `
            "--quiet", "--wait", "--norestart", `
            "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
            "--add Microsoft.VisualStudio.Component.VC.Tools.ARM64", `
            "--add Microsoft.VisualStudio.Component.VC.ATL", `
            "--add Microsoft.VisualStudio.Component.VC.ATLMFC", `
            "--add Microsoft.VisualStudio.Component.VC.Redist.14.Latest", `
            "--add Microsoft.VisualStudio.Component.Windows10SDK.19041", `
            "--add Microsoft.VisualStudio.Component.Windows10SDK.20348", `
            "--add Microsoft.VisualStudio.Component.Windows11SDK.22000", `
            "--add Microsoft.VisualStudio.Component.Windows11SDK.22621", `
            "--add Microsoft.VisualStudio.Component.Spectre.MitigatedLibs.Latest" `
            -Wait -NoNewWindow
          
          # Install standalone Windows SDK if needed
          $sdkPath = "C:\Program Files (x86)\Windows Kits\10"
          if (-not (Test-Path "$sdkPath\Include\10.0.19041.0\ucrt\stddef.h")) {
            Write-Host "Installing Windows SDK separately..."
            $sdkUrl = "https://go.microsoft.com/fwlink/p/?linkid=2164384"  # Windows 10 SDK 10.0.19041
            $sdkInstaller = "$env:TEMP\winsdksetup.exe"
            Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkInstaller
            Start-Process -FilePath $sdkInstaller -ArgumentList "/q" -Wait -NoNewWindow
          }
      
      # Configure Windows SDK paths
      - name: Configure Windows SDK paths
        shell: powershell
        run: |
          # Find Windows SDK paths
          $sdkPaths = @(
            "C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0",
            "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0",
            "C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0"
          )
          
          $sdkIncludePath = $null
          
          foreach ($path in $sdkPaths) {
            if (Test-Path "$path\ucrt\stddef.h") {
              $sdkIncludePath = $path
              Write-Host "Found Windows SDK include files at: $path"
              
              # Verify all needed include directories exist
              $ucrtPath = "$path\ucrt"
              $umPath = "$path\um"
              $sharedPath = "$path\shared"
              
              if ((Test-Path $ucrtPath) -and (Test-Path $umPath) -and (Test-Path $sharedPath)) {
                Write-Host "Verified all SDK include directories exist:"
                Write-Host "  UCRT: $ucrtPath"
                Write-Host "  UM: $umPath"
                Write-Host "  Shared: $sharedPath"
              } else {
                Write-Warning "Some SDK include directories are missing!"
              }
              
              break
            }
          }
          
          if (-not $sdkIncludePath) {
            Write-Warning "Could not find Windows SDK include files!"
            Write-Host "Looking for Windows Kits directory structure..."
            Get-ChildItem "C:\Program Files (x86)\Windows Kits" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Found: $_"
            }
          }
          
          # Also look for Visual Studio include path
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $msvcPath = Get-ChildItem -Path "$vsPath\VC\Tools\MSVC" | Sort-Object -Property Name -Descending | Select-Object -First 1
          $msvcIncludePath = Join-Path -Path $msvcPath.FullName -ChildPath "include"
          
          if (Test-Path $msvcIncludePath) {
            Write-Host "Found MSVC include path: $msvcIncludePath"
          } else {
            Write-Warning "Could not find MSVC include path!"
          }
          
          # List installed Windows SDKs using the registry
          Write-Host "Checking registry for installed Windows SDKs..."
          try {
            $installedSDKs = Get-ChildItem "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows" -ErrorAction SilentlyContinue
            foreach ($sdk in $installedSDKs) {
              $sdkVersion = Split-Path -Leaf $sdk.PSPath
              $sdkInstallPath = Get-ItemProperty -Path $sdk.PSPath -Name "InstallationFolder" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty InstallationFolder
              Write-Host "SDK $sdkVersion found at: $sdkInstallPath"
            }
          } catch {
            Write-Warning "Error accessing registry: $_"
          }
      
      # Ensure correct link.exe is used
      - name: Configure PATH for correct link.exe
        shell: powershell
        run: |
          # Find VS installation path
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $msvcPath = Get-ChildItem -Path "$vsPath\VC\Tools\MSVC" | Sort-Object -Property Name -Descending | Select-Object -First 1
          $msvcBinPath = Join-Path -Path $msvcPath.FullName -ChildPath "bin\Hostx64\x64"
          
          # Show current PATH and which link.exe is in use
          Write-Host "Original PATH: $env:PATH"
          try {
            $linkPath = (Get-Command link.exe -ErrorAction Stop).Source
            Write-Host "Current link.exe: $linkPath"
            if ($linkPath -like "*Git*") {
              Write-Warning "Using Git's link.exe. Will be fixed."
            }
          } catch {
            Write-Warning "link.exe not found in PATH"
          }
          
          # Add VS path to beginning of PATH
          $env:PATH = "$msvcBinPath;$env:PATH"
          echo "PATH=$msvcBinPath;$env:PATH" >> $env:GITHUB_ENV
          
          # Verify correct link.exe is now used
          $linkPath = (Get-Command link.exe -ErrorAction SilentlyContinue).Source
          Write-Host "Now using link.exe from: $linkPath"
          
          # Add diagnostic info about the environment
          Write-Host "Current environment details:"
          Get-ChildItem env: | Sort-Object -Property Name | Format-Table -Property Name, Value -AutoSize
      
      # Use shorter paths for cargo cache
      - name: Setup shorter cargo paths
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "C:\cr"
          New-Item -ItemType Directory -Force -Path "C:\zb"
          echo "CARGO_HOME=C:\cr" >> $env:GITHUB_ENV
          echo "CARGO_TARGET_DIR=C:\zb" >> $env:GITHUB_ENV
      
      # Update cache to use shorter paths
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            C:\cr
            C:\zb
          key: ${{ runner.os }}-cargo-spectre-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build Windows executable
        uses: ./.github/actions/build-windows-executable
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zed-windows
          path: zed-windows.zip
          retention-days: 7
